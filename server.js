// server.js
// const express = require('express');
// const { exec } = require('child_process');

import express from "express"
import { exec } from "child_process"
import cors from "cors"
import fs from "fs"
import bodyParser from "body-parser";

const app = express();
const port = 3001;
app.use(cors());

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: false }))

// parse application/json
app.use(bodyParser.json())

const assfile = "current2.ass"

// Verifica se o arquivo current.ass existe e, se não existir, cria-o com o cabeçalho padrão

const defaultHeader = `[Script Info]
; Script generated by pysubs2
; https://pypi.python.org/pypi/pysubs2
WrapStyle: 0
ScaledBorderAndShadow: no
Collisions: Normal
ScriptType: v4.00+

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,40.0,&H00FFFFFF,&H000000FF,&H80000000,&H00000000,0,0,0,0,100.0,100.0,0.0,0.0,1,2.0,2.0,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text`;

const createDefaultAssFile = () => {


  fs.access('public/'+assfile, fs.constants.F_OK, (err) => {
    if (err) {
      fs.writeFile('public/'+assfile, defaultHeader, (err) => {
        if (err) {
          console.error('Error creating default ASS file:', err);
        } else {
          console.log('Default ASS file created successfully');
        }
      });
    }
  });
};

createDefaultAssFile();

app.post('/save-dialogue', (req, res) => {
  console.log("a1", req.body)
  const { dialogue } = req.body;


  if (!dialogue) {
    return res.status(400).send('Dialogue is required');
  }

  // Format the dialogue with a timestamp
  const currentTime = new Date().toISOString();
  const formattedDialogue = defaultHeader+`\n${dialogue}`;

  // Write the dialogue to the ASS file
  fs.writeFile('public/'+assfile, formattedDialogue, (err) => {
    if (err) {
      console.error(err);
      return res.status(500).send('Error writing dialogue to file');
    }
    console.log('Dialogue saved successfully');
    res.send(dialogue);
  });
});








app.get('/generate-video', (req, res) => {
  const color = req.query.color || 'black';
  const sec = req.query.segundos || 5;
  console.log("oie ", req.query)

//   return 123
  const command = `ffmpeg -y -f lavfi -i color=c=#${color}:s=600x600:d=${sec} public/output_sem.mp4`;

  console.log("comando ",command)
  exec(command, (error, stdout, stderr) => {
    if (error) {
      console.error(`exec error: ${error}`);
      return;
    }
   //  console.log(`stdout: ${stdout}`);
   //  console.error(`stderr: ${stderr}`);
   const cm2 = `ffmpeg -i public/output_sem.mp4  -vf "ass=public/current2.ass" -y public/output.mp4`
   
   exec(cm2, (error, stdout, stderr) => {
      if (error) {
        console.error(`exec error: ${error}`);
        return;
      }
     //  console.log(`stdout: ${stdout}`);
     //  console.error(`stderr: ${stderr}`);
     res.send('Video generated successfully!');
   });

});



});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
